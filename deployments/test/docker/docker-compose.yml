version: '3.9'

services:
  db:
    # Using postgres 14 because postgres 15 changed the permission handling and
    # still not familiar with that
    image: postgres:14

    # The identifier of the container in a docker network. Think of it as an
    # alias to its IP address
    hostname: photofluxdb
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PHOTOFLUX_PASSWORD: "photoflux"
    volumes:
      # - data:/var/lib/postgresql/data
      - ../../../scripts/postgres/:/docker-entrypoint-initdb.d:ro
      - ../migrate:/scripts/migrate

    # db network is used for the communication between the db and the app
    networks:
      - db
      - photoflux

  # photoflux:

  #   # Since the dockerfile copies go files from the top level of the project,
  #   # it makes sense to have the project directory the build context.
  #   build:
  #     context: "../../../."
  #     # Specified relative to the build context.
  #     dockerfile: ./deployments/test/docker/Dockerfile
  #   hostname: photoflux # see db
  #   restart: unless-stopped

  #   # environment:
  #   #   - PHOTOFLUX_DATABASE_HOST=photofluxdb
  #   depends_on:
  #     - db
  #     - rabbitmq
  #   networks:
  #     - db
  #     - events
  #   ports:
  #     - 8033:8033

  rabbitmq:
    image: rabbitmq:3.12-rc-management
    # In addition to this being helfpul in the network, rabbitmq requires this
    # to be specified.
    hostname: photofluxmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
      # - ../rabbitmq:/etc/rabbitmq:ro
      - ../rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - events
      - photoflux

  minio:
    image: quay.io/minio/minio:RELEASE.2023-04-13T03-08-07Z
    command: server --console-address ":9090" /data
    depends_on:
      - rabbitmq
    ports:
      - 9000:9000
      - 9090:9090
    container_name: minio

    # Used to identify the container in the policy network in order to
    # initialize the policy
    hostname: minio

    environment:
      MINIO_ROOT_USER: hello
      MINIO_ROOT_PASSWORD: myfriend
      MINIO_NOTIFY_AMQP_ENABLE_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_URL_PRIMARY: "amqp://iulia:mygreatnewpassword@photofluxmq:5672/photoflux"
      MINIO_NOTIFY_AMQP_EXCHANGE_PRIMARY: "upload"
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE_PRIMARY: "direct"
      MINIO_NOTIFY_AMQP_ROUTING_KEY_PRIMARY: "upload"
      MINIO_NOTIFY_AMQP_MANDATORY_PRIMARY: "on"
      MINIO_NOTIFY_AMQP_DURABLE_PRIMARY: "on"
      # non-blocking message delivery
      MINIO_NOTIFY_AMQP_NO_WAIT_PRIMARY: "off"
      MINIO_NOTIFY_AMQP_INTERNAL_PRIMARY: "off"
      # automatically deletes messages if there are no consumers
      MINIO_NOTIFY_AMQP_AUTO_DELETED_PRIMARY: "off"
      # 1 - non-persistent queue, 2 - persistent queue
      MINIO_NOTIFY_AMQP_DELIVERY_MODE_PRIMARY: "2"
      # messages that were not delivered to rabbitmq are stored here. minio
      # will resend these messages once rabbitmq is back online.
      MINIO_NOTIFY_AMQP_QUEUE_DIR_PRIMARY: "/mnt/data/undelivered"
      # maximum number of undelivered messages stored by minio
      MINIO_NOTIFY_AMQP_QUEUE_LIMIT_PRIMARY: "1000"
      MINIO_NOTIFY_AMQP_COMMENT_PRIMARY: "let's see if it works"
      MINIO_IDENTITY_PLUGIN_URL: "http://minio:8033/api/auth/minio"
      # enable STS
      MINIO_IDENTITY_PLUGIN_ROLE_POLICY: "userpolicy"
      MINIO_IDENTITY_PLUGIN_ROLE_ID: "abcd"
    volumes:
      - ../../../mnt/data:/data
    networks:
      - events
      - policy
      - photoflux

  # minio initialization steps. Uses the minio client binary to
  # - create the user policy
  minioinit:
    image: minio/mc:RELEASE.2023-04-12T02-21-51Z
    depends_on:
      - minio
    volumes:
      - ../minio/userpolicy.json:/userpolicy.json
    entrypoint: >
      /bin/sh -c "  /usr/bin/mc alias set photoflux http://minio:9000 hello myfriend; /usr/bin/mc admin policy create photoflux userpolicy /userpolicy.json;
       exit 0;"
    networks:
      - policy
      - photoflux

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27017:27017

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

networks:
  events:
    driver: bridge
  db:

  # This network is used to initialize minio container configurations such as
  # user policy.
  policy:
  photoflux:
